<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yolkBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
ogX = x;
ogY = y;
depth = 2;

//Bullet Variables
vSpeed = 0;
destX = x + irandom_range(-100,100); //+100;
destY = y + irandom_range(-100,100); //-100;
scale1 = .05;
scale2 = 1;
shootAlarm = 30; //60
shootTime = shootAlarm;

//BULLET ARC CALCULATIONS
/*arcHeight = 50;
//Get arcY (Max Height in Arc)
if(ogY &lt; destY) arcY = ogY-arcHeight;
else arcY = destY-arcHeight;
//Get Pos to ArcY Distances
arcDist1 = abs(arcY-ogY);
arcDist2 = abs(arcY-destY);
//Get Ratio Between Dist 1 and 2
arcRatio1 = 0;
arcRatio2 = 0;

arcRatio = arcDist1/(arcDist1+arcDist2);
//Calculate VSpeed
rateCount = 0;
rateTotal = 0;
do
{
    rateCount++;
    rateTotal += rateCount;
}
until (rateCount &gt;= round(arcRatio*shootTime))
vRate = arcDist1/rateTotal;
vSpeed = vRate*round(arcRatio*shootTime);
vSpeed *= -1;
//show_debug_message(arcDist1);
//show_debug_message(rateTotal);
//show_debug_message(vRate);
//show_debug_message(vSpeed);
*/

//Create Crosshair
crosshair = instance_create(destX,destY,obj_yolkBoss_crossHair);

//Set Starting Scale
image_xscale = scale1;
image_yscale = scale1;

//Create Trail Variables
trailCount = 10;
for(i = 0;i &lt; trailCount;i++)
{
    trailScale[i] = image_xscale;
    trailX[i] = x;
    trailY[i] = y;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Deduct Shoot Alarm
if(shootAlarm &gt; 0)
{
    //Manage Trail Array
    for(i = 0;i &lt; trailCount-1;i++)
    {
        trailX[trailCount-i-1] = trailX[trailCount-i-2];
        trailY[trailCount-i-1] = trailY[trailCount-i-2];
        trailScale[trailCount-i-1] = trailScale[trailCount-i-2];
    }
    trailX[0] = x;
    trailY[0] = y;
    trailScale[0] = image_xscale;
    //show_debug_message(trailScale[0]);
    //show_debug_message(trailX[0]);
    //show_debug_message(trailY[0]);
    
    //Manage Bullet Position
    x = ogX+(destX-ogX)*((shootTime-shootAlarm)/shootTime);
    y = ogY+(destY-ogY)*((shootTime-shootAlarm)/shootTime);
    
    //Manage Arc Speed
    //y += vSpeed;
    //vSpeed += vRate;
    
    //Manage Scale
    image_xscale = scale1+(scale2-scale1)*((shootTime-shootAlarm)/shootTime)
    image_yscale = scale1+(scale2-scale1)*((shootTime-shootAlarm)/shootTime)
    
    //Deduct Alarm
    shootAlarm -= 1;

}
//Destroy Bullet
else
{
    instance_destroy(crosshair);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Draw Trail
for(i = trailCount-1;i &gt; 0;i--)
{
    //Draw Only Even Numbers
    if(i%3 == 0)
    {
        draw_sprite_ext(spr_yolkBullet,0,trailX[i],trailY[i],trailScale[i],trailScale[i],0,c_white,.1);
    }
}

//Draw Self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
