<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_clawElevator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
//depth = -2; //TEMPORARY
depth = 0;
mask_index = spr_elevator;

//Cutscene Variables
operating = false;
cutClock = 0;

//Individual Cutscene Variables (Sorry for messy code)
crowX = 4940;
crowY = 280;
crowSprite = spr_kingCrowBerry;
crowImg = 0;
camShake = false;
shakeTime = 90;
camX = 0;
camXSpeed = 6;
camXRate = 1;

clawX = crowX-3; //4620+view_wview[0]/2;
clawY = -sprite_get_height(spr_claw);
clawYSpeed = 0;
clawImg = 0;
clawState = 0;
clawY1 = -15; //sprite_get_height(spr_claw);
clawY2 = 80;

//(Claw Delay Vars)
clawAlarm = 0;
clawDelay = 1;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check If In Operation
if(!operating)
{
    if(place_meeting(x,y,obj_player))
    {
        obj_player.cutscene = true;
        operating = true;
    }
}
else 
{
    //Increment Cutscene Clock
    cutClock += 1;
    
    
    //Cutscene Controller 
    if(cutClock == 1)
    {
        obj_player.cdx = 4620;
        if(instance_exists(obj_kingCrowBerry)){
            instance_destroy(obj_kingCrowBerry); //(Destroy OG Crow)
        }
    }
    else if(cutClock == 215)
    {
        camShake = true;
    }
    else if(cutClock == 220)
    {
        crowSprite = spr_kingCrowBerry_suprised;
    }
    else if(cutClock == 425)
    {
        crowImg = 1;
    }   
    else if(cutClock == 450)
    {
        crowImg = 0;
        crowSprite = spr_kingCrowBerry_confused;
    }
    else if(cutClock == 550)
    {
        crowImg = 1;
    }
    else if(cutClock == 600)
    {
        crowImg = 0;
    }
    else if(cutClock = 650)
    {
        crowImg = 2;
    }
    else if(cutClock == 700)
    {
        crowImg = 0;
    }
    else if(cutClock == 720)
    {
        clawState = 1;
    }
    else if(cutClock == 890)
    {
        clawImg = 1;
    }
    else if(cutClock == 910)
    {
        crowImg = 3;
    }
    else if(cutClock == 930)
    {
        clawState = 2;
    }
     else if(cutClock == 950)
    {
        crowImg = 4;
    }
    else if(cutClock == 980)
    {
        crowImg = 5;
    }
    else if(cutClock == 1050)
    {
        instance_create(x,y,obj_fadeInElevator);
    }
    
    //Camera Shake Function
    if(camShake &amp;&amp; shakeTime &gt; 0)
    {
        shakeTime -= 1;
        
        //Modify Cam Speed
        if(camX &gt; 0){
            camXSpeed -= camXRate;
        }
        else if(camX &lt; 0){
            camXSpeed += camXRate;
        }
        
        //Move CamX
        camX += camXSpeed;
        
        //Set Cam Position
        obj_player.cx = 4620+camX; //4620
    }
    else if(camShake &amp;&amp; ((4620+camX)-4620) &lt; 5)
    {
        obj_player.cdx = 4620; //4620
        camShake = false;
    }
    
    //Claw Movements
    if(clawState == 1) //Claw Initial Movement In 
    {
        //Move Claw Into Place
        if(clawY+1 &lt; clawY1)
        {
            //clawYSpeed += .01;
            clawY += 1; //ceil(clawYSpeed);
        }
        else
        {
            clawY = clawY1;
            //clawYSpeed = 0; (Doesn't Matter)
        }
    } 
    else if(clawState == 2)
    {
        //Countdown Claw Movement Alarm
        if(clawAlarm &gt; 0)
        {
            clawAlarm -= 1;
        }
        else if(clawY != clawY2)
        {
            //Move Claw Into Place
            if(clawY+1 &lt; clawY2)
            {
                clawY += 1; 
            }
            else
            {
                clawY = clawY2;
            }
            
            //Set Claw Delay
            clawAlarm = 1; //2
        }
    }  
    
    
    //Claw Movement
    //clawY += clawYSpeed;
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Self
//draw_self();

//Don't Draw If Not Activated
if(!operating){
    exit;
}

//Draw King Crowberry
draw_sprite_ext(crowSprite,crowImg,crowX,crowY,1,1,0,c_white,1);

//Draw Claw Hook
wireLength = clawY/sprite_get_height(spr_clawWire);
draw_sprite_ext(spr_clawWire,0,clawX,clawY,1,wireLength,0,c_white,1);

//Draw Claw
draw_sprite_ext(spr_claw,clawImg,clawX,clawY,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
