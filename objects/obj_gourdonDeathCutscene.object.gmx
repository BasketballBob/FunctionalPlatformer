<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
depth = -2; //TEMPORARY

//Cutscene Variables
operating = false;
cutClock = 0;

//Individual Cutscene Variables (Sorry for messy code)

//Gourdon
gourdX = 70;
gourdY = 280;
gourdImg = 0;
gourdSprite = spr_gourdon;
gourdVSpeed = 0;
gourdHSpeed = 0;
gourdXScale = 1;
jump = false;
jumpY = 220;


//Yolk Child
yolkX = 490;
yolkY = -200; //120
yolkDY = yolkY;
yolkVSpeed = 1;
yolkImg = 0;
yolkSprite = spr_yolkChild;

//Confetti Array
confetti = false;
conQuantity = 160;
conRotSpeed = .1;
for(i=conQuantity;i&gt;0;--i)
{
    //ConArray Key
    //0 - x
    //1 - y
    //2 - color
    //3 - xscale
    //4 - spinDir
    
    conArray[0,i] = irandom_range(0,room_width);
    
    //Manage Y Position
    if(i &lt; conQuantity*(2/10)){
        conArray[1,i] = -sprite_get_height(spr_confetti)-irandom_range(0,view_hview[0])*2;
    }
    else if(i &lt; conQuantity*(5/10)){
        conArray[1,i] = -sprite_get_height(spr_confetti)-irandom_range(0,view_hview[0])*1.5;
    }
    else{
        conArray[1,i] = -sprite_get_height(spr_confetti)-irandom_range(0,view_hview[0]);
    }
    
    conArray[2,i] = make_colour_hsv(irandom_range(0,256),100,200);
    conArray[3,i] = (1/10)*irandom_range(0,10); //10
    conArray[4,i] = 1;
}

//Poster
poster = false;
posterRollX = 60;
posterRollY = 0; //-sprite_get_height(spr_posterRoll);
actualPosterY = 20;
posterVSpeed = 0; 
posterVSpeedCap = 16; //14
posterMovementAlarm = 0;
posterBounceY = 280;
posterBounced = false;
posterBounceSpeed = 9;
posterImgSpeed = .5
posterImg = 0;
posterImgAlarm = 0; //(Function making poster fall slower)

//Murder Weapon
murderX = 40;
murderY = -60;
murderDY = murderY;
murderVSpeed = 1;
murderImg = 0;
murderAngle = 0;
murderTiltSpeed = -20;
fireWeapon = false; //Mechanism Can Only Be Used Once Without Resetting MurderTiltSpeed

//Gourdon Mush Array
mushActivated = false;
mushQuantity = 300;
gravTimer = 0;
for(i=mushQuantity;i&gt;0;--i)
{
    //mushArray Key
    //0 - x
    //1 - y
    //2 - hSpeed
    //3 - vSpeed
    //4 - rotation
    //5 - rotationSpeed 
    //6 - image_alpha
    //7 - color
    
    mushArray[0,i] = irandom_range(260,340); //300-sprite_get_width(spr_gourdon)/2; //Gourdon Final X Position
    mushArray[1,i] = irandom_range(jumpY-sprite_get_height(spr_gourdon),jumpY);
    mushArray[2,i] = irandom_range(-5,6);
    mushArray[3,i] = irandom_range(-25,-5);
    mushArray[4,i] = irandom_range(0,360);
    mushArray[5,i] = irandom_range(-7,7);
    mushArray[6,i] = random_range(1,1); //.5
    mushArray[7,i] = make_colour_rgb(irandom_range(200,220),irandom_range(160,180),irandom_range(65,85)); //make_colour_rgb(212,170,76); //irandom_range(73,93));  //83
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check If In Operation
if(!operating)
{
    if(place_meeting(x,y,obj_player))
    {
        obj_player.cutscene = true;
        operating = true;
    }
}
else 
{
    //Increment Cutscene Clock
    cutClock += 1;
    
    
    //Cutscene Controller 
    if(cutClock == 1)
    {
        obj_player.cdy = 0;
    }
    else if(cutClock == 25)
    {
        gourdHSpeed = 5;
        gourdSprite = spr_gourdon_running; 
    }
    else if(cutClock == 40)
    {
        jump = true;
        gourdVSpeed = -18;
        //gourdHSpeed = 5;
        gourdSprite = spr_gourdon_jumping;
    }
    else if(cutClock == 160)
    {
        gourdSprite = spr_gourdon_contemplating;
    }
    else if(cutClock == 260)
    {
        poster = true;
    }
    
    else if(cutClock == 310)
    {
        confetti = true;
    }
    else if(cutClock == 360)
    {
        yolkDY = 50;
    }
    else if(cutClock == 365)
    {
        gourdSprite = spr_gourdon_pride;
    }
    else if(cutClock == 400)
    {
        gourdImg += 1;
    }
    else if(cutClock == 800)
    {
        murderDY = 200;
        yolkSprite = spr_yolkChild_devious;
    }
    else if(cutClock == 830)
    {
        yolkImg += 1;
    }
    else if(cutClock == 860)
    {
        yolkImg += 1;
    }
    else if(cutClock == 1170)
    {
        gourdImg = 0;
        gourdSprite = spr_gourdon_dead;
    }
    else if(cutClock == 1220)
    {   
        murderImg += 1;
    }
    else if(cutClock == 1230)
    {
        murderTiltSpeed = 20;
        fireWeapon = true;
    }
    else if(cutClock == 1231)
    {   
        mushActivated = true;
        obj_leftoverMush2.image_alpha = .8;
        gourdImg = 1;
    }
    else if(cutClock == 1280)
    {
        obj_leftoverMush.image_alpha = .8;
    }
    else if(cutClock == 1450)
    {
        yolkDY = -200;
        yolkVSpeed = -1;
    }
    else if(cutClock == 1500)
    {
        murderDY = -60;
        murderVSpeed = -2;
    }
    else if(cutClock == 1700)
    {
        tile_add(bg_winnerPoster,0,0,background_get_width(bg_winnerPoster),background_get_height(bg_winnerPoster),posterRollX,actualPosterY,1);
        obj_player.cutscene = false;
        instance_destroy();
    }
    
    //Gourdon Jump Function
    if(jump)
    {
        //Gourd Gravity
        gourdVSpeed += 1;
    
        //Manage Basic Gourd Collisions
        if(gourdVSpeed &lt; 0)
        {
            gourdY += gourdVSpeed;
        }
        else
        {
            if(gourdY+gourdVSpeed &lt; jumpY)
            {
                gourdY += gourdVSpeed;
            } 
            else
            {
                //Conclude Jump
                gourdY = jumpY;
                gourdHSpeed = 0;
                gourdSprite = spr_gourdon;
                jump = false;
            }
        }            
    }
    
    //Gourdon HSpeed Manager
    gourdX += gourdHSpeed;
    
    //Yolk Child Position Manager
    if(yolkY != yolkDY)
    {
        if(sign(yolkDY-yolkY) == sign(yolkDY-(yolkY+yolkVSpeed)))
        {
            yolkY += yolkVSpeed;
        }
        else
        {
            yolkY = yolkDY;
        }
    }
    
    //Murder Weapon Speed Manager
    if(murderY != murderDY)
    {
        if(sign(murderDY-murderY) == sign(murderDY-(murderY+murderVSpeed)))
        {
            murderY += murderVSpeed;
        }
        else
        {
            murderY = murderDY;
        }
    }
    
    //Poster Manager
    if(poster &amp;&amp; posterImgAlarm == 0)
    {
        //Falling Poster Roll
        if(posterVSpeed+1 &lt; posterVSpeedCap)
        {
            posterVSpeed += 1;
        }
        else
        {
            posterVSpeed = posterVSpeedCap;
        }
        
        //Bounce Once
        if(!posterBounced &amp;&amp; posterRollY+posterVSpeed&gt;posterBounceY)
        {
            posterRollY = posterBounceY;
            posterVSpeed = -posterBounceSpeed;
            posterBounced = true;
        }      
        else
        {
            posterRollY += posterVSpeed;
        }
        
        //Reset Poster Img Alarm
        posterImgAlarm = 1;
    }
    else if(poster)
    {
        posterImgAlarm -= 1;
    }
    
    //Weapon Firing Mechanism 
    if(fireWeapon)
    {
        //Manage Weapon Tilting Speed (Gravity Changed For Going Upwards and Downwards)
        if(murderTiltSpeed &gt;= 0)
        {
            murderTiltSpeed -= 3; //grav
            murderAngle += murderTiltSpeed;
        }
        else if(murderAngle+murderTiltSpeed &gt; 0)
        {
            murderTiltSpeed -= .5; //grav 1
            murderAngle += murderTiltSpeed;
        }
        else
        {
            murderAngle = 0;
            //fireWeapon = false;
            //murderTiltSpeed = 20;
        }
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Self
//draw_self();

//Draw Gourdon
draw_sprite_ext(gourdSprite,gourdImg,gourdX,gourdY,gourdXScale,1,0,c_white,1);

//Draw Yolk Claw Wire
draw_sprite_ext(spr_clawWire,0,yolkX,yolkY,1,-((view_yview[0]-yolkY)/sprite_get_height(spr_clawWire)),0,c_white,1);

//Draw Yolk Child
draw_sprite_ext(yolkSprite,yolkImg,yolkX,yolkY,1,1,0,c_white,1);

//Poster Img Manager
if(posterImgAlarm &gt; 0)
{
    posterImgAlarm -= 1;
}
else
{
    //Set New Img Alarm 
    posterImgAlarm = ceil(60*posterImgSpeed);
    
    //Loop Through Poster Animation
    if(posterImg+1 &lt;= sprite_get_number(spr_posterRoll)-1){
        posterImg += 1;
    }
    else{
        posterImg = 0;
    }
}

//Draw Actual Poster
draw_sprite_part(spr_poster,0,0,0,sprite_get_width(spr_poster),clamp(posterRollY-actualPosterY,0,sprite_get_height(spr_poster)),posterRollX,actualPosterY);

//Draw Poster Roll
draw_sprite(spr_posterRoll,posterImg,posterRollX,posterRollY);

//Draw Confetti Array
if(confetti)
{
    //Confetti Manager
    for(i=conQuantity;i&gt;0;--i)
    {
        //Move Confetti 
        conArray[1,i] += 2;
        
        //Rotate Confetti
        if(conArray[3,i]-conRotSpeed*conArray[4,i] &gt; 0 &amp;&amp; conArray[3,i]-conRotSpeed*conArray[4,i] &lt; 1)
        {
            conArray[3,i] -= conRotSpeed*conArray[4,i];
        }
        else
        {
            conArray[3,i] = round(conArray[3,i]);
            conArray[4,i] *= -1;
        }
        
        //Draw Confetti (Onscreen)
        if(conArray[1,i] &lt; view_yview[0]+view_hview[0]+sprite_get_height(spr_confetti))
        {   
            //draw_sprite(spr_confetti,0,conArray[0,i],conArray[1,i]);
            draw_sprite_ext(spr_confetti,0,conArray[0,i],conArray[1,i],conArray[3,i],1,0,conArray[2,i],1);
        }
    }
}

//Draw Murder Weapon Wire
draw_sprite_ext(spr_clawWire,0,murderX,murderY,1,(murderY-view_yview[0])/sprite_get_height(spr_clawWire),0,c_white,1);

//Draw Murder Weapon
draw_sprite_ext(spr_murderWeapon,murderImg,murderX,murderY,1,1,murderAngle,c_white,1);


//Draw Gourdon Mush Array
if(mushActivated)
{
    //Grav Timer
    if(gravTimer &gt; 0)
    {
        gravTimer -= 1;
    }
    else
    {
        gravTimer = 1; //2
    }
      
    //Process All Mush Pieces
    for(i=mushQuantity;i&gt;0;--i)
    {
        //Only Manage Mush Onscreen
        if(mushArray[1,i] &lt;= view_yview[0]+view_hview[0]+sprite_get_height(spr_gourdonMush))
        {
            //Implement Gravity
            if(gravTimer == 0){
                mushArray[3,i] += 1;  
            }         
                      
            //Manage Position Changes
            mushArray[0,i] += mushArray[2,i];
            mushArray[1,i] += mushArray[3,i];
        
            //Manage Mush Rotation
            mushArray[4,i] += mushArray[5,i];
        
            //Draw Mush
            draw_sprite_ext(spr_gourdonMush,0,mushArray[0,i],mushArray[1,i],1,1,mushArray[4,i],mushArray[7,i],mushArray[6,i]);       
        }    
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
