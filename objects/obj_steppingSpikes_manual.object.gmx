<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spikes</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_obstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
image_speed = 0;
sprite_index = -1;
depth = -1.5;

//Stepping Spike Variables
imageIndex = 0;
drawColor = c_white;
triggerColor = make_color_rgb(248,100,100);
triggered = false;
spikeAlarm = 0;
spikeDelay = 20; //30 //Time For Spike Warning
spikeCooldown = 20; //20 //Time For Spike Hitbox
fadeIn = false;
fadeAlarm = 60;
fadeTime = fadeAlarm;
spikeHeightOffSet = 4; //Starting Position Of Rising Spike

//Create Delay Array (For Smoother Animation)
delayCount = 0;
for(i = 0;i &lt; spikeDelay;i++)
{
    delayCount += sqr(i)+1;
    delayArray[i] = delayCount;
}

color1 = 255;
colorRange = 255;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////////////////////////////////////////////////////////////NOTE: "Stepping Spikes Manual" are an assets specifically used for the yolkChild bossfight
//////////////////////////////////////////////////////////////

//Trigger Spikes
/*if(position_meeting(x+10,y+10,obj_player) &amp;&amp; !obj_player.dead &amp;&amp; !triggered)
{
    spikeAlarm = spikeDelay+spikeCooldown;
    triggered = true;
}*/

//Trigger Spikes Manually
if(triggered)
{
    spikeAlarm = spikeDelay+spikeCooldown;
    triggered = false;
}

//Manage Spikes
if(spikeAlarm &gt; 0)
{
    spikeAlarm -= 1;
    
    //Manage Color
    //colorShift = color1-colorRange*(spikeAlarm/(spikeCooldown+spikeDelay));
    //drawColor = make_color_rgb(255,colorShift,colorShift);
    
    //Manage Spikes
    if(spikeAlarm &gt; spikeCooldown)
    {
        imageIndex = 2;
        sprite_index = -1;
        //drawColor = triggerColor;
        //colorShift = color1-colorRange*((spikeAlarm-spikeDelay)/(spikeCooldown));
        //drawColor = make_color_rgb(255,colorShift,colorShift);
    }
    else
    {
        imageIndex = 2;
        sprite_index = spr_spikes;
        //drawColor = c_white; //triggerColor;
    }
}
else
{   
    imageIndex = 0;
    sprite_index = -1;
    drawColor = c_white;
    triggered = false;
}

//Fading In
if(fadeIn)
{
    //Fade In
    if(fadeAlarm &gt; 0)
    {
        fadeAlarm -= 1;
        image_alpha = (fadeTime-fadeAlarm)/fadeTime;
    }
    else
    {
        image_alpha = 1;
        fadeIn = false;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Draw Partial Spike
if(spikeAlarm &gt; spikeCooldown)
{    

    //Debugging
    show_debug_message("YEET");
    for(i = 0;i &lt; spikeDelay;i++)
    {
        spikeHeight = ((sprite_get_height(spr_spikes)-spikeHeightOffSet)*((delayCount-delayArray[i])/delayCount));
        show_debug_message(spikeHeight);
    }
    for(i = 0;i &lt; spikeDelay;i++)
    {
        spikeHeight = ((sprite_get_height(spr_spikes)-spikeHeightOffSet)*((delayCount-delayArray[i])/delayCount));
        show_debug_message(spikeHeight);
    }
    
    //Determine Spike Height
    spikeHeight = ((sprite_get_height(spr_spikes)-spikeHeightOffSet)*((delayCount-delayArray[spikeDelay-(spikeAlarm-spikeCooldown)])/delayCount));
    //spikeHeight = ((sprite_get_height(spr_spikes))*((delayCount-delayArray[spikeDelay-(spikeAlarm-spikeCooldown)])/delayCount));
    
    //Draw Spikes
    draw_sprite_part(spr_spikes,imageIndex,0,0,sprite_get_width(spr_spikes),sprite_get_height(spr_spikes)+spikeHeightOffSet-spikeHeight,x,y+spikeHeight-spikeHeightOffSet);
    //draw_sprite_part(spr_spikes,imageIndex,0,0,sprite_get_width(spr_spikes),sprite_get_height(spr_spikes)-spikeHeight,x,y+spikeHeight);
    
    /*draw_sprite_part(spr_spikes,imageIndex,0,0,sprite_get_width(spr_spikes),
    sprite_get_height(spr_spikes)-(sprite_get_height(spr_spikes)*((spikeAlarm-spikeCooldown)/spikeDelay)),
    x,y+(sprite_get_height(spr_spikes)*((spikeAlarm-spikeCooldown)/spikeDelay)))*/
}

//Draw Normal Sprite
else
{
    draw_sprite(spr_spikes,imageIndex,x,y);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
