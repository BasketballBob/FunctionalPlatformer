<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_transitionBlack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
depth = -10;

//Death Screen Variables
deathAlarm = 60; //Shoud be above fadeAlarm+skullAlarm
deathTime = deathAlarm;
fadeAlarm = 30; //20
fadeTime = fadeAlarm;
fadeTrackTime = 20;
skullX = obj_player.x;
skullY = obj_player.y;
skullScale1 = 5;
skullScale2 = 1;
skullAlarm = 10; //15
skullTime = skullAlarm
skullAlpha = 1;
skullScale = skullScale1;

//Generate Skull Spin Speed
skullAngle = 0;
skullSpinSpeed = 0;
skullSpinRate = 1; //.5
for(i = 0;i &lt; skullTime;i++)
{
    skullSpinSpeed += skullSpinRate;
    skullAngle -= skullSpinSpeed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Manage Fade Timer
if(fadeAlarm &gt; 0)
{
    //Track Player Pos
    if(fadeAlarm &gt; fadeTime-fadeTrackTime)
    {
        skullX = obj_player.x-view_xview[0];
        skullY = obj_player.y-view_yview[0];
    }
    
    image_alpha = 1-(fadeAlarm/fadeTime);
    fadeAlarm -= 1;
}
else image_alpha = 1;

//Draw Transition To Screen
xScale = room_width/sprite_get_width(sprite_index);
yScale = room_height/sprite_get_height(sprite_index);
draw_sprite_ext(sprite_index,0,view_xview[0],view_yview[0],xScale,yScale,0,c_white,image_alpha);

//Manage Death Alarm 
if(deathAlarm &gt; 0) deathAlarm--;
else
{
    room_restart();
    instance_destroy();
}

//Clamp Skull Position (Not Relative)
/*if(skullX &gt; view_xview[0]+view_wview[0]-sprite_get_width(spr_deathSkull)/2)
{
    skullX = view_xview[0]+view_wview[0]-sprite_get_width(spr_deathSkull)/2;
}
else if(skullX &lt; view_xview[0]+sprite_get_width(spr_deathSkull)/2)
{
    skullX = view_xview[0]+sprite_get_width(spr_deathSkull)/2; 
}
if(skullY &gt; view_yview[0]+view_hview[0]-sprite_get_height(spr_deathSkull)/2)
{
    skullY = view_yview[0]+view_hview[0]-sprite_get_height(spr_deathSkull)/2;
}
else if(skullY &lt; view_yview[0]+sprite_get_height(spr_deathSkull)/2)
{
    skullY = view_yview[0]+sprite_get_height(spr_deathSkull)/2;
}*/

//Camera Relative Clamp
skullWidth = sprite_get_width(spr_deathSkull)*1.4;
skullHeight = sprite_get_height(spr_deathSkull)*1.2;
if(skullX &lt; 0+skullWidth/2) skullX = 0+skullWidth/2;
else if(skullX &gt; view_wview[0]-skullWidth/2) skullX = view_wview[0]-skullWidth/2;
if(skullY &lt; 0+skullHeight/2) skullY = 0+skullHeight/2;
else if(skullY &gt; view_hview[0]-skullHeight/2) skullY = view_hview[0]-skullHeight/2;


//Manage Skull
if(fadeAlarm == 0)
{
    //Skull Alarm
    if(skullAlarm &gt; 0)
    {    
        //Skull Alpha
        skullAlpha = (skullTime-skullAlarm)/skullTime;
    
        //Spin Skull
        skullAngle += skullSpinSpeed;
        skullSpinSpeed -= skullSpinRate;
        
        //Deduct Alarm
        skullAlarm -= 1;
    }
    
    //Skull Scale
    skullScale = skullScale2+(skullScale1-skullScale2)*(skullAlarm/skullTime);
    
    //Fade Out After Spinning
    if(deathAlarm &lt; deathTime-fadeTime-skullTime)
    {
        skullAlpha = deathAlarm/(deathTime-fadeTime-skullTime);
    }

    //Draw Skull
    draw_sprite_ext(spr_deathSkull,0,view_xview[0]+skullX,view_yview[0]+skullY,skullScale,skullScale,skullAngle,c_white,skullAlpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
