<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yolkChild_devious</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
depth = -3;
image_speed = 0;
image_index = 2;
x = 400;
y = 6660;

//Following Yolk Variables
posInitialized = true;
vSpeed = 0;
vCap = 4;
finalVCap = 5;
vRate = .25; //.5
vStart = 3;
hSpeed = 5;
mp = 0; //movePosition
followDif = 30; //130 //Difference
winkAlarm = 0;
winkTime = 30;


//Yolk Position Array
//0 = x    1 = y
yolkPos[0,0] = 400;
yolkPos[0,1] = 6660;//
yolkPos[1,0] = 220;
yolkPos[1,1] = 5920;//
yolkPos[2,0] = 480; //200
yolkPos[2,1] = 5260;//5360
yolkPos[3,0] = 560;
yolkPos[3,1] = 4400;//
yolkPos[4,0] = 240;
yolkPos[4,1] = 4080;//
yolkPos[5,0] = 220;
yolkPos[5,1] = 3560;//X
yolkPos[6,0] = 100;
yolkPos[6,1] = 2980;//
yolkPos[7,0] = 520;
yolkPos[7,1] = 2320;//
yolkPos[8,0] = 560;
yolkPos[8,1] = 1380;//
yolkPos[9,0] = 80;
yolkPos[9,1] = 740;//
yolkPos[10,0] = 80;
yolkPos[10,1] = 300;//
yolkPos[11,0] = 80;
yolkPos[11,1] = -320;//

//Determine Array Length
yolkArrayLength = array_height_2d(yolkPos);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Set Starting Position
if(posInitialized)
{
    //Set Starting Position (make it work with checkpoints)
    for(i = 0;i &lt; yolkArrayLength;i++)
    {
        //Check If Given Position Is At Appropriate Camera Size
        if(yolkPos[i,1] &lt; view_yview[0]+view_hview[0])//yolkPos[i,1]+followDif &gt; view_yview[0])
        {
            x = yolkPos[i,0];
            y = yolkPos[i,1];
            mp = i;
            show_debug_message(i);
            break;
        }
        //show_debug_message("NUTTERBUTTER");
    }
    posInitialized = false;
}

//Determine If Position Needs To Be Adjusted 
if(yolkPos[mp,0] == x &amp;&amp; yolkPos[mp,1] == y)
{
    //Determine Whether To Increment Array Position
    if(y+followDif &gt; view_yview[0] &amp;&amp; mp+1 &lt; yolkArrayLength)
    {
        mp += 1;
        vSpeed = -vStart; //Reset Acceleration
        winkAlarm = winkTime; //Set Wink Alarm
        
        //Change VCap On Final Escape
        if(mp == yolkArrayLength-1)
        {
            vCap = 20;
        }
    }
}

//Move Towards Move Position
else
{
    //Define Directional Variables (Doesn't Work Infront Of H-Function For Some Reason?)
    hDir = sign(yolkPos[mp,0]-x);
    
    //Vertical Acceleration 
    if(vSpeed &lt; vCap) vSpeed += vRate;
    else vSpeed = vCap;
    
    //Vertical Movement
    if(y &gt; yolkPos[mp,1]) //Only Functions Moving Upwards
    {
        if(y-vSpeed &gt; yolkPos[mp,1]) y -= vSpeed;
        else y = yolkPos[mp,1];
        
    }
    
    //Horizontal Movement
    else if(x != yolkPos[mp,0])
    {
        if(sign(x-yolkPos[mp,0]) == sign(x-yolkPos[mp,0]+hSpeed*hDir)) x += hSpeed*hDir;
        else x = yolkPos[mp,0];
    }
}

//Manage Sprite (winking)
if(winkAlarm &gt; 0)
{
    //Spawn Wink Star
    if(winkAlarm == winkTime)
    {
        instance_create(x-33,y+70,obj_winkStar);
    }
    
    sprite_index = spr_yolkChild_wink;
    image_index = 0;
    winkAlarm -= 1;
}
else
{
    sprite_index = spr_yolkChild_devious;
    image_index = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Claw Wire
draw_sprite_ext(spr_clawWire,0,x,y,1,(y-view_yview[0])/sprite_get_height(spr_clawWire),0,c_white,1);

//Draw Sprite
draw_sprite(sprite_index,image_index,x,y); //round(x),round(y));
//object_get_sprite(obj_followingYolk)

//Draw Reference Rectangle
draw_set_alpha(.3);
//draw_rectangle(x,y+followDif,x+50,y+followDif+15,0);
draw_set_alpha(1);

//Debugging
/*draw_text(20,200,x);
draw_text(20,220,yolkPos[mp,0]);
draw_text(20,240,y);
draw_text(20,260,yolkPos[mp,1]);

draw_text(320,180,"BOOOOOOOOOOOOOOOP");*/

//show_debug_message(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
