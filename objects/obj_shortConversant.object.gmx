<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spiderLump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
image_speed = 0;

//Conversation Variables
textX = x;
textY = y-sprite_height;
textYOffSet = 0;
lastPrintCount = 0;
//animationSpeed = 0; //0
imageSpeed = 0;
interactionDist = 100; //100 //200
interactionRatio = 8/3; //Interaction Ratio Defines the ratio between left and right interaction dist (check step function line 17 for mroe details)
//textDepth = -2; //
//textColor = c_white; //
//textFont = fnt_conversation1; //
//textWidth = 100;//

//Conversation Pieces
//conversation[0] = "Zip zap zoodle doodle bip brap brumple dump dump";
//conversation[1] = "BREEEEEEEEE ZOINK BOINK BEEP";

//Create Conversation Box
textBox = instance_create(textX,textY,obj_conversation);

//Manipulate Text Box Variables
textBox.drawColor = textColor;
textBox.drawFont = textFont;
textBox.widthCap = textWidth;
textBox.depth = textDepth;
textBox.printString = " ";

//NEW Short Conversation Variables
//playerContact = false;
//lastPlayerContact = false;
conversationActive = false; //false;
convPos = 0;
textActive = false;
conversationFinished = false;

progressText = false; //Input Variables Set By obj_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//REMADE Conversation System
if(conversationActive)
{       
    //Progress To Next Textbox
    if(progressText &amp;&amp; !textActive &amp;&amp; convPos &lt; array_length_1d(conversation))
    {
        textBox.printString = conversation[convPos];
        textActive = true;
        convPos++;
    }

    //Print Conversation Text
    if(textBox.printCount == string_length(textBox.printString))
    {
        textActive = false;
    }     
    
    //Reset Player Input Variables
    progressText = false;  
}
//Reset Important Variables
else
{
    convPos = 0;
    textActive = false;
    textBox.printCount = 0;
    textBox.printString = " ";
}

//Manipulate Conversation Animation
if(textBox.printCount != lastPrintCount &amp;&amp; textBox.printCount != string_length(textBox.printString) &amp;&amp; textBox.printAlarm &lt;= textBox.printRate)
{
    imageSpeed = animationSpeed; //.2;
}
else if(textBox.printCount == string_length(textBox.printString) || textBox.printAlarm &gt; textBox.printRate || !textActive)
{
    //image_index = 0;
    imageSpeed = 0;
    //textFinished = true;
}
lastPrintCount = textBox.printCount;

//Smooth Animation Manager 
//(Change to default pose after mouth finishes closing)
if(imageSpeed &gt; 0)
{
    image_speed = imageSpeed;
}
else if(imageSpeed == 0 &amp;&amp; floor(image_index) == 0)
{   
    image_speed = imageSpeed;
}
show_debug_message(image_index);

//Control Textbox Position
//textBox.x = textX;
//textBox.y = textY+textYOffSet

/*
//Determine If Player Contact Is Changed
if(place_meeting(x,y,obj_player))
{
    textBox.printCount = 4//string_length(textBox.printString);
    textBox.printString = conversation;
}
else
{
    textBox.printString = " ";
}
*/

//Determine Change In Player Contact
/*lastPlayerContact = playerContact;
if(obj_player.x &gt; x-interactionDist &amp;&amp; obj_player.x &lt; x+(interactionDist/interactionRatio)){ //abs(obj_player.x-x) &lt; interactionDist
    playerContact = true;
}
else{
    playerContact = false;
}*/

//Manipulate Text On Player Contact Change
//TURN ON
/* if(playerContact == true &amp;&amp; lastPlayerContact != playerContact)
{
    textBox.printString = conversation;        
}
//TURN OFF
else if(playerContact == false &amp;&amp; lastPlayerContact != playerContact)
{
    textBox.printString = " ";
}
lastPlayerContact = playerContact;*/

//Determine State Of Conversation
/*if(textBox.printCount == string_length(textBox.printString))
{
    textFinished = true;
}
else textFinished = false;*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Self
draw_self();

//draw_set_colour(make_colour_rgb(0,0,0));
//draw_text(100,100,startDelay);

//Alert Player Of Conversation Changes
/*
if(startDelay == 0 &amp;&amp; textBox.printCount == string_length(textBox.printString) &amp;&amp; textBox.printString != " ") // &amp;&amp; instance_exists(obj_player)
{   
    draw_set_font(fnt_playerFont);
    draw_set_colour(make_colour_rgb(64,64,64)); //make_colour_rgb(197,135,135) || make_colour_rgb(115,58,58)
    draw_text(obj_player.x-5,obj_player.y-50,"Z");
}   
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
