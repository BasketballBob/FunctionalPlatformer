<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
depth = -4; //TEMPORARY

//Cutscene Variables
operating = false;
cutClock = 0;

//Individual Cutscene Variables (Sorry for messy code)
gourdX = 3420;
gourdY = 300;
gourdImg = 0;
gourdImgSpeed = .02;
imgAlarm = 0;
gourdSprite = spr_gourdon_contemplating;
hSpeed = 0;
vSpeed = 0;
runSpeed = 6; //5
ogY = gourdY;
jumpSpeed = 17;
grav = 1;
imageSpeed = .1;

//Destroy If Player Is Ahead
if(obj_player.x &gt; x)
{
    instance_destroy();
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check If In Operation
if(!operating)
{
    if(place_meeting(x,y,obj_player))
    {
        obj_player.cutscene = true;
        operating = true;
    }
}
else 
{
    //Increment Cutscene Clock
    cutClock += 1;
    
    
    //Cutscene Controller 
    if(cutClock == 1)
    {
        obj_player.cdx = 3220;
    }
    else if(cutClock == 200)
    {
        gourdImgSpeed = 0;
    }
    else if(cutClock == 300)
    {
        gourdSprite = spr_gourdon_kneeling;  
    }
    else if(cutClock == 325)
    {
        gourdImg = 1;
    }
    else if(cutClock == 400)
    {
        gourdSprite = spr_gourdon_running;
        gourdImgSpeed = .1;
        hSpeed = runSpeed;
    }
    else if(cutClock == 420) //415
    {
        gourdSprite = spr_gourdon_jumping;
        vSpeed = -jumpSpeed;
    }   
    else if(cutClock = 425)
    {
        if(instance_exists(obj_destructableWall))
        {
            obj_destructableWall.activated = true;
        }
    }
    else if(cutClock == 410+30)
    {
        gourdSprite = spr_gourdon_running;
        gourdImgSpeed = .1;
    }
    else if(cutClock == 410+60)
    {
        gourdSprite = spr_gourdon_jumping;
        vSpeed = -jumpSpeed;
    }
    else if(cutClock == 540)
    {
        obj_player.cutscene = false;
        instance_destroy();
    }
    
    //GOURDON MANAGERS
    //Gourd Gravity
    if(gourdY &lt; ogY)
    {
        vSpeed += grav;
    }
    //Gourd Vertical Movement
    if(vSpeed != 0)
    {
        if(gourdY+vSpeed &lt; ogY)
        {
            gourdY += vSpeed;
        }
        else
        {
            gourdY = ogY;
        }
    }
    //Gourd Horizontal Movement
    if(hSpeed != 0)
    {
        gourdX += hSpeed;
    }   
    
    
    //Gourdon Animation
    if(gourdImgSpeed != 0)
    {   
        //Countdown Alarm For Sprite Change
        imgAlarm -= 1;
        if(imgAlarm &lt;= 0)
        {   
            gourdImg += 1;
            imgAlarm = 1/gourdImgSpeed;//set speed;
        }
        
        //Manage Gourd Img (Edgecase for looping sprite)
        if(gourdImg &gt;= sprite_get_number(gourdSprite))
        {
            gourdImg = 0;
        }
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(100,100,gourdImg);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Gourdon Sprite
draw_sprite_ext(gourdSprite,gourdImg,gourdX,gourdY,1,1,0,c_white,1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
