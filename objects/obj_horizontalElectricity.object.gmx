<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_obstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
spriteWidth = sprite_width;

//Electricity Variables
orbColor = c_white;
shockAlarm = 0;
shockOn = 20;
shockOff = 60;
shocking = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();

//Turn On/Off Electricity
if(shockAlarm &gt; 0)
{
    shockAlarm -= 1;
}
else
{
    //Modify Shocking
    if(shocking){
        shocking = false;
        shockAlarm = shockOff;
    }
    else{
        shocking = true;
        shockAlarm = shockOn;
    }
}

//Manage Orb Color
if(!shocking)
{
    //orbColor = make_colour_rgb(120,100,shockAlarm);
    //draw_set_colour(make_colour_rgb(shockAlarm,shockAlarm,shockAlarm));
}
else
{
    //orbColor = make_colour_rgb(255,255,255);
}

//Draw Electricity Orbs
orbSize = sprite_get_width(spr_electricityOrb);
//draw_sprite(spr_electricityOrb,0,x+orbSize/2,y+orbSize/2);
//draw_sprite(spr_electricityOrb,0,x+spriteWidth-orbSize/2,y+orbSize/2);
draw_sprite_ext(spr_electricityOrb,0,x+orbSize/2,y+orbSize/2,1,1,0,orbColor,1);
draw_sprite_ext(spr_electricityOrb,0,x+spriteWidth-orbSize/2,y+orbSize/2,1,1,0,orbColor,1);
//draw_text(x+50,y+50,shockAlarm);


//Draw Electricity
if(shocking)
{
    for(i=image_xscale-2;i &gt; 0;--i)
    {
        draw_sprite(spr_electricity,0,x+orbSize/2+orbSize*i,y+orbSize/2);
    }
   // draw_sprite(spr_electricity,0,x+orbSize/2,y); //IGNORE
}

//Manage Hitbox 
if(shocking)
{
    sprite_index = spr_wall;
    //draw_self();
}
else
{
    sprite_index = -1;
}

//mask_index 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
