<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
depth = 0;

//Conversation Variables
printString = "poopy dinke berries for stinky elderly women who are absolutely positively poopy dick disgusting";
lastString = "poopy dicks";
printCount = 0;
traceBackCount = 0; //Edgecase for long words
    //string_char_at
    //string_copy
formatted = false;
dialogueBoxEnabled = false;
boxHeight = 0;
widthCap = 100; //100
printRate = 1;
printAlarm = 0;
drawColor = make_color_rgb(100,100,100);
drawFont = draw_set_font(fnt_playerFont);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_exists(sprite_index))
{ 
    draw_self();
}

//Set Font
draw_set_font(drawFont);

//Change Text Line
if(printString != lastString)
{
    printCount = 0;
    printAlarm = 0;
    formatted = false;
}

//Speed Up Text
if(keyboard_check_pressed(ord('X')) &amp;&amp; formatted &amp;&amp; printCount != string_length(printString))
{
    printCount = string_length(printString);
}


//Format Text
if(!formatted)
{
    //Loop Until Formatted
    do
    {   
        //Insert Tab When Needed
        if(string_width(string_copy(printString,1,printCount)) &gt; widthCap)
        {
            //Trace Back To Space In Text
            if(string_char_at(printString,printCount) != ' ')
            {
                traceBackCount = printCount;
                do
                {
                    printCount -= 1;          
                    
                    //Edgecase for long words
                    if(printCount == 0)
                    {
                        printString = string_insert(' ',printString,traceBackCount);
                        printCount = traceBackCount;
                    }
                }
                until string_char_at(printString,printCount) == ' ' || printCount = 0;
            }
            
            //Replace Last Space with Tab
            printString = string_insert('#',printString,printCount);
            printString = string_delete(printString,printCount+1,1);
        } 
        
        printCount += 1;
    }
    until printCount = string_length(printString);
    
    //Cease Formatting
    yOffSet = -string_height(printString);
    printCount = 0;
    lastString = printString;
    formatted = true;
}

//Print Text
if(printCount &lt; string_length(printString))
{
    if(printAlarm &gt; 0)
    {
        printAlarm -= 1;
    }
    else
    {        
        //Increment PrintCount
        printCount += 1;
        
        //Set Alarm For Text Rate
        if(string_char_at(printString,printCount) == ',')
        {
            printAlarm = 20;
        }
        else if(string_char_at(printString,printCount) == '.' || string_char_at(printString,printCount) == '!' || string_char_at(printString,printCount) == '?')
        {
            printAlarm = 30;
        }
        else
        {
            printAlarm = printRate;
        }
    }
}

//Draw Conversation Rectangled
if(dialogueBoxEnabled &amp;&amp; printString != " ")
{
    draw_set_color(c_white);
    draw_rectangle(x-widthCap/2,y+yOffSet,x+widthCap/2,y,0)
}

//Draw Current String
//draw_set_font(drawFont);
draw_set_halign(fa_center);
draw_set_colour(drawColor); 
draw_text(x,y+yOffSet,string_copy(printString,0,printCount));

//draw_text(obj_player.x,obj_player.y-100,widthCap);
//draw_text(obj_player.x,obj_player.y-75,string_width(string_copy(printString,1,printCount)));

//draw_text(100,80,printCount);
//draw_text(100,60,string_length(printString));
//draw_text(100,40,string_width(printString));
//draw_text(100,20,string_width(string_copy(printString,0,printCount)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
