<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_obstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic Variables
image_speed = .05;
depth = -4;

//Water Variables
moveSpeed = .5; //1
//moveRate = .005; 
//moveCap = 1;
//shiftOffSet = 0;
//shiftSpeed = 0;
//shiftRate = .25;
//shiftMax = 2;
playerY = room_height;
bandAlarm = 100; //80
bandTime = bandAlarm;
trackOffSet = 60;
speed1 = .5; //slowSpeed
speed2 = 50; //fastSpeed
spriteOffSet = -5;
moveAlarm = 0;
speedBoostTime = 60;
speedBoostAlarm = 0;

//Final Level Change Speed
if(room == rm_levelFINALE)
{
    speed2 = 35;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEBUGGING DISABLING
//exit;

//Move Upwards Normally
if(moveSpeed &gt;= 1)
{
    y -= moveSpeed;
    
    //Keep Y Rounded
    y = round(y);
}
//Move Upwards Incrementally
else
{  
    //Countdown Even Movement Alarm
    if(moveAlarm &gt; 0)
    {
        moveAlarm -= 1;
    }
    else
    {
        y -= 1;
        moveAlarm = (1/moveSpeed)-1;
    }
}

//Simple Rubberbanding Speed Manager
if(y &gt; view_yview[0]+view_hview[0]+spriteOffSet)
{
    moveSpeed = sign((view_yview[0]+view_hview[0]+spriteOffSet)-y)*(((view_yview[0]+view_hview[0]+spriteOffSet)-y)*.02); //speed2;
    moveSpeed = ceil(moveSpeed);
}
else
{
    moveSpeed = speed1;
}


//Increment Movespeed
/*
if(moveSpeed+moveRate &lt; moveCap)
{
    moveSpeed += moveRate;
}
else
{
    moveSpeed = moveCap;
}
*/ 
/*
//Advanced Rubberbanding
if(instance_exists(obj_player) &amp;&amp; instance_number(obj_player) == 1)
{
    //Track Player Movement
    mask_index = spr_basicCollision;
    if(place_meeting(obj_player.x,obj_player.y+1,obj_wall))
    {
        if(obj_player.y &lt; playerY-trackOffSet)
        {
            //Set Player Tracking Vars
            playerY = obj_player.y;
            bandAlarm = bandTime;
        }
    }
    mask_index = spr_water;
    
    //Countdown Rubberbanding Alarm 
    if(bandAlarm &gt; 0)
    {
        bandAlarm -= 1;
    }
    else if(y &gt; view_yview[0]+view_hview[0]+spriteOffSet)
    {
        y = view_yview[0]+view_hview[0]+spriteOffSet;
        speedBoostAlarm = speedBoostTime;
    }
    
}

//Advanced Rubberbanding Speed Manager
if(speedBoostAlarm &gt; 0)
{
    speedBoostAlarm -= 1;
    moveSpeed = speed1+speed1*2*(speedBoostAlarm/speedBoostTime);
}
else if(y &gt; view_yview[0]+view_hview[0]+spriteOffSet &amp;&amp; bandAlarm &gt; 0)
{
    moveSpeed = speed2;
}
else
{
    moveSpeed = speed1;
}

*/




//Move Shift Offset
//if(shiftOffSet != 0 &amp;&amp; shiftSpeed*sign(shiftSpeed) &lt; shiftMax)
//{
    //shiftSpeed -= shiftRate*sign(shiftOffSet);
//}
//shiftOffSet += shiftSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(-1);
draw_set_colour(c_white);
draw_text(50,80,bandAlarm);
draw_text(50,110,playerY);
draw_text(50,140,moveSpeed);
draw_text(50,170,y);
draw_text(50,200,view_yview[0]+view_hview[0]+spriteOffSet);
//draw_text(50,230,sign((view_yview[0]+view_hview[0]+spriteOffSet)-y)*(((view_yview[0]+view_hview[0]+spriteOffSet)-y)*.1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
draw_sprite(spr_water,image_index,x,y);
//draw_sprite
draw_sprite_ext(spr_waterBase,0,x,y+sprite_height,room_width/sprite_get_width(spr_waterBase),(room_height-y)/sprite_get_height(spr_waterBase),0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
